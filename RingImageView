package com.changhong.dmt.system.misc.view;

/**
 * Created by Administrator on 2018/2/28 0028.
 */

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.Paint;
import android.util.AttributeSet;
import android.view.View;

import com.changhong.dmt.system.misc.utils.ChLogger;

public class RingImageView extends View {
    private float mWidth;
    private float mHeight;

    private float centerX; // 圆心X
    private float centerY; // 圆心Y
    private float minRadius; // 圆环的宽度
    private float maxRadius; // 圆半径
    static float changeRadius; // 变化的半径
    public static boolean  isFirst;
    private boolean isMath;
    private float changeRadiusUnit ; // 变化的半径
    private Paint mLinePaint;
    private int waveColor = 0xffc45c; // Color.argb(0, 0, 0, 0); //颜色
    private static boolean isAdding = true;
    private boolean started;


    public RingImageView(Context context) {
        super(context);
        initView();
    }
    public RingImageView(Context context, AttributeSet attrs) {
        this(context, attrs, 0);
    }
    public RingImageView(Context context, AttributeSet attrs, int defStyle) {
        super(context, attrs, defStyle);
        ChLogger.print(true,"take--------");
        initView();
    }

    private void initView() {

       if(!isFirst){
           isMath = true;
           isFirst = true;
       }
        mLinePaint = new Paint();
        mLinePaint.setAntiAlias(true);
        mLinePaint.setStrokeWidth(1.0F);
        mLinePaint.setStyle(Paint.Style.STROKE);
        mLinePaint.setColor(waveColor);
    }


    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);

        if(isMath){
            if(isAdding){
                changeRadius = changeRadius + changeRadiusUnit ;
            }else {
                changeRadius = changeRadius - changeRadiusUnit*4;
            }

            if (isAdding && changeRadius > maxRadius*0.97) {
                changeRadius = maxRadius;
                isAdding = false;
            } else if(!isAdding && changeRadius < minRadius*1.02){
                changeRadius = (float) (minRadius*1.02);
                isAdding = true;
            }
        }



        if(isAdding){

            float ss = (float) ((changeRadius-maxRadius*0.88)/(maxRadius*0.12));
            int alpha = (int) (56.0F);
            if(ss >0) alpha = (int) (56.0F * (1.0F - ss));//透明度与半径反比
            mLinePaint.setAlpha(alpha);

        } else {

            float ss = (float) ((changeRadius-minRadius)/(minRadius*0.4));
            int alpha = 0;
            if(ss <1) alpha = (int) (25.0F * (1.0F - ss));//透明度与半径反比
            mLinePaint.setAlpha(alpha);
        }

        mLinePaint.setStrokeWidth(changeRadius-minRadius);
        canvas.drawCircle(centerX, centerY, minRadius +(changeRadius-minRadius)/2, mLinePaint);

        start();
    }

    public void start() {
        if (!started) {
            started = true;
            new Thread(thread).start();
        }
    }

    private Runnable thread = new Runnable() {

        @Override
        public void run() {
            // TODO Auto-generated method stub
            while (true) {

                postInvalidate();
                try {
                    if(changeRadius>maxRadius*0.9 ){

                        Thread.sleep(35);
                    }if(changeRadius>maxRadius*0.95 ){

                        Thread.sleep(55);
                    }else {
                        Thread.sleep(5);
                    }
                } catch (InterruptedException localInterruptedException) {
                    localInterruptedException.printStackTrace();
                }
            }
        }
    };

    @Override
    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
        ChLogger.print(true,"take1--------"+w);
        // 记录下view的宽高
        mWidth = w;
        mHeight = h;

        centerX = mWidth / 2.0F;
        centerY = mHeight / 2.0F;


        minRadius = mWidth/4.0F;
        maxRadius = minRadius*1.73F;

        changeRadius = minRadius;
        changeRadiusUnit = minRadius*0.73F/40;
    }

}
